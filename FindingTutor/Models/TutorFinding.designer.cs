#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FindingTutor.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FindingTutor")]
	public partial class TutorFindingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertQualification(Qualification instance);
    partial void UpdateQualification(Qualification instance);
    partial void DeleteQualification(Qualification instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    #endregion
		
		public TutorFindingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FindingTutorConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TutorFindingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutorFindingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutorFindingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TutorFindingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Qualification> Qualifications
		{
			get
			{
				return this.GetTable<Qualification>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grades")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdGrade;
		
		private string _Grade1;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdGradeChanging(int value);
    partial void OnIdGradeChanged();
    partial void OnGrade1Changing(string value);
    partial void OnGrade1Changed();
    #endregion
		
		public Grade()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGrade", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdGrade
		{
			get
			{
				return this._IdGrade;
			}
			set
			{
				if ((this._IdGrade != value))
				{
					this.OnIdGradeChanging(value);
					this.SendPropertyChanging();
					this._IdGrade = value;
					this.SendPropertyChanged("IdGrade");
					this.OnIdGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Grade", Storage="_Grade1", DbType="NVarChar(50)")]
		public string Grade1
		{
			get
			{
				return this._Grade1;
			}
			set
			{
				if ((this._Grade1 != value))
				{
					this.OnGrade1Changing(value);
					this.SendPropertyChanging();
					this._Grade1 = value;
					this.SendPropertyChanged("Grade1");
					this.OnGrade1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Course", Storage="_Courses", ThisKey="IdGrade", OtherKey="IdGrade")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdHistory;
		
		private System.Nullable<int> _IdStudent;
		
		private System.Nullable<int> _IdTeacher;
		
		private System.Nullable<System.DateTime> _DateTeach;
		
		private System.Nullable<int> _IdCourse;
		
		private System.Nullable<decimal> _Price;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Teacher> _Teacher;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdHistoryChanging(int value);
    partial void OnIdHistoryChanged();
    partial void OnIdStudentChanging(System.Nullable<int> value);
    partial void OnIdStudentChanged();
    partial void OnIdTeacherChanging(System.Nullable<int> value);
    partial void OnIdTeacherChanged();
    partial void OnDateTeachChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTeachChanged();
    partial void OnIdCourseChanging(System.Nullable<int> value);
    partial void OnIdCourseChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public History()
		{
			this._Student = default(EntityRef<Student>);
			this._Teacher = default(EntityRef<Teacher>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdHistory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdHistory
		{
			get
			{
				return this._IdHistory;
			}
			set
			{
				if ((this._IdHistory != value))
				{
					this.OnIdHistoryChanging(value);
					this.SendPropertyChanging();
					this._IdHistory = value;
					this.SendPropertyChanged("IdHistory");
					this.OnIdHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStudent", DbType="Int")]
		public System.Nullable<int> IdStudent
		{
			get
			{
				return this._IdStudent;
			}
			set
			{
				if ((this._IdStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStudentChanging(value);
					this.SendPropertyChanging();
					this._IdStudent = value;
					this.SendPropertyChanged("IdStudent");
					this.OnIdStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeacher", DbType="Int")]
		public System.Nullable<int> IdTeacher
		{
			get
			{
				return this._IdTeacher;
			}
			set
			{
				if ((this._IdTeacher != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeacherChanging(value);
					this.SendPropertyChanging();
					this._IdTeacher = value;
					this.SendPropertyChanged("IdTeacher");
					this.OnIdTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTeach", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTeach
		{
			get
			{
				return this._DateTeach;
			}
			set
			{
				if ((this._DateTeach != value))
				{
					this.OnDateTeachChanging(value);
					this.SendPropertyChanging();
					this._DateTeach = value;
					this.SendPropertyChanged("DateTeach");
					this.OnDateTeachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCourse", DbType="Int")]
		public System.Nullable<int> IdCourse
		{
			get
			{
				return this._IdCourse;
			}
			set
			{
				if ((this._IdCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCourseChanging(value);
					this.SendPropertyChanging();
					this._IdCourse = value;
					this.SendPropertyChanged("IdCourse");
					this.OnIdCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_History", Storage="_Student", ThisKey="IdStudent", OtherKey="IdStudent", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._IdStudent = value.IdStudent;
					}
					else
					{
						this._IdStudent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_History", Storage="_Teacher", ThisKey="IdTeacher", OtherKey="IdTeacher", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._IdTeacher = value.IdTeacher;
					}
					else
					{
						this._IdTeacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_History", Storage="_Course", ThisKey="IdCourse", OtherKey="IdCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._IdCourse = value.IdCourse;
					}
					else
					{
						this._IdCourse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdProfile;
		
		private System.Nullable<int> _IdTeacher;
		
		private System.Nullable<int> _IdCourse;
		
		private EntityRef<Teacher> _Teacher;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdProfileChanging(int value);
    partial void OnIdProfileChanged();
    partial void OnIdTeacherChanging(System.Nullable<int> value);
    partial void OnIdTeacherChanged();
    partial void OnIdCourseChanging(System.Nullable<int> value);
    partial void OnIdCourseChanged();
    #endregion
		
		public Profile()
		{
			this._Teacher = default(EntityRef<Teacher>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProfile", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdProfile
		{
			get
			{
				return this._IdProfile;
			}
			set
			{
				if ((this._IdProfile != value))
				{
					this.OnIdProfileChanging(value);
					this.SendPropertyChanging();
					this._IdProfile = value;
					this.SendPropertyChanged("IdProfile");
					this.OnIdProfileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeacher", DbType="Int")]
		public System.Nullable<int> IdTeacher
		{
			get
			{
				return this._IdTeacher;
			}
			set
			{
				if ((this._IdTeacher != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeacherChanging(value);
					this.SendPropertyChanging();
					this._IdTeacher = value;
					this.SendPropertyChanged("IdTeacher");
					this.OnIdTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCourse", DbType="Int")]
		public System.Nullable<int> IdCourse
		{
			get
			{
				return this._IdCourse;
			}
			set
			{
				if ((this._IdCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCourseChanging(value);
					this.SendPropertyChanging();
					this._IdCourse = value;
					this.SendPropertyChanged("IdCourse");
					this.OnIdCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Profile", Storage="_Teacher", ThisKey="IdTeacher", OtherKey="IdTeacher", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._IdTeacher = value.IdTeacher;
					}
					else
					{
						this._IdTeacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Profile", Storage="_Course", ThisKey="IdCourse", OtherKey="IdCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._IdCourse = value.IdCourse;
					}
					else
					{
						this._IdCourse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Qualifications")]
	public partial class Qualification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdQualification;
		
		private string _Provider;
		
		private string _Specialized;
		
		private string _Degree;
		
		private System.Nullable<int> _IdTeacher;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdQualificationChanging(int value);
    partial void OnIdQualificationChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnSpecializedChanging(string value);
    partial void OnSpecializedChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnIdTeacherChanging(System.Nullable<int> value);
    partial void OnIdTeacherChanged();
    #endregion
		
		public Qualification()
		{
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdQualification", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdQualification
		{
			get
			{
				return this._IdQualification;
			}
			set
			{
				if ((this._IdQualification != value))
				{
					this.OnIdQualificationChanging(value);
					this.SendPropertyChanging();
					this._IdQualification = value;
					this.SendPropertyChanged("IdQualification");
					this.OnIdQualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="NVarChar(500)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialized", DbType="NVarChar(500)")]
		public string Specialized
		{
			get
			{
				return this._Specialized;
			}
			set
			{
				if ((this._Specialized != value))
				{
					this.OnSpecializedChanging(value);
					this.SendPropertyChanging();
					this._Specialized = value;
					this.SendPropertyChanged("Specialized");
					this.OnSpecializedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="NVarChar(500)")]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeacher", DbType="Int")]
		public System.Nullable<int> IdTeacher
		{
			get
			{
				return this._IdTeacher;
			}
			set
			{
				if ((this._IdTeacher != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeacherChanging(value);
					this.SendPropertyChanging();
					this._IdTeacher = value;
					this.SendPropertyChanged("IdTeacher");
					this.OnIdTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Qualification", Storage="_Teacher", ThisKey="IdTeacher", OtherKey="IdTeacher", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Qualifications.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Qualifications.Add(this);
						this._IdTeacher = value.IdTeacher;
					}
					else
					{
						this._IdTeacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reviews")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdReview;
		
		private System.Nullable<int> _IdStudent;
		
		private System.Nullable<int> _IdTeacher;
		
		private string _Message;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdReviewChanging(int value);
    partial void OnIdReviewChanged();
    partial void OnIdStudentChanging(System.Nullable<int> value);
    partial void OnIdStudentChanged();
    partial void OnIdTeacherChanging(System.Nullable<int> value);
    partial void OnIdTeacherChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Review()
		{
			this._Student = default(EntityRef<Student>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdReview", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdReview
		{
			get
			{
				return this._IdReview;
			}
			set
			{
				if ((this._IdReview != value))
				{
					this.OnIdReviewChanging(value);
					this.SendPropertyChanging();
					this._IdReview = value;
					this.SendPropertyChanged("IdReview");
					this.OnIdReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStudent", DbType="Int")]
		public System.Nullable<int> IdStudent
		{
			get
			{
				return this._IdStudent;
			}
			set
			{
				if ((this._IdStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStudentChanging(value);
					this.SendPropertyChanging();
					this._IdStudent = value;
					this.SendPropertyChanged("IdStudent");
					this.OnIdStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeacher", DbType="Int")]
		public System.Nullable<int> IdTeacher
		{
			get
			{
				return this._IdTeacher;
			}
			set
			{
				if ((this._IdTeacher != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeacherChanging(value);
					this.SendPropertyChanging();
					this._IdTeacher = value;
					this.SendPropertyChanged("IdTeacher");
					this.OnIdTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Review", Storage="_Student", ThisKey="IdStudent", OtherKey="IdStudent", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._IdStudent = value.IdStudent;
					}
					else
					{
						this._IdStudent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Review", Storage="_Teacher", ThisKey="IdTeacher", OtherKey="IdTeacher", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._IdTeacher = value.IdTeacher;
					}
					else
					{
						this._IdTeacher = default(Nullable<int>);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdStudent;
		
		private string _Email;
		
		private string _Password;
		
		private string _Name;
		
		private System.Nullable<decimal> _Phone;
		
		private string _Avatar;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStudentChanging(int value);
    partial void OnIdStudentChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    #endregion
		
		public Student()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStudent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdStudent
		{
			get
			{
				return this._IdStudent;
			}
			set
			{
				if ((this._IdStudent != value))
				{
					this.OnIdStudentChanging(value);
					this.SendPropertyChanging();
					this._IdStudent = value;
					this.SendPropertyChanged("IdStudent");
					this.OnIdStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(500)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(500)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_History", Storage="_Histories", ThisKey="IdStudent", OtherKey="IdStudent")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Review", Storage="_Reviews", ThisKey="IdStudent", OtherKey="IdStudent")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSubject;
		
		private string _Name;
		
		private string _Image;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSubjectChanging(int value);
    partial void OnIdSubjectChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Subject()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSubject", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdSubject
		{
			get
			{
				return this._IdSubject;
			}
			set
			{
				if ((this._IdSubject != value))
				{
					this.OnIdSubjectChanging(value);
					this.SendPropertyChanging();
					this._IdSubject = value;
					this.SendPropertyChanged("IdSubject");
					this.OnIdSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(500)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Courses", ThisKey="IdSubject", OtherKey="IdSubject")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTeacher;
		
		private string _Email;
		
		private string _Password;
		
		private string _Name;
		
		private System.Nullable<decimal> _Phone;
		
		private System.Nullable<decimal> _Price;
		
		private string _Avatar;
		
		private string _Bio;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Profile> _Profiles;
		
		private EntitySet<Qualification> _Qualifications;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTeacherChanging(int value);
    partial void OnIdTeacherChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(System.Nullable<decimal> value);
    partial void OnPhoneChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    #endregion
		
		public Teacher()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			this._Qualifications = new EntitySet<Qualification>(new Action<Qualification>(this.attach_Qualifications), new Action<Qualification>(this.detach_Qualifications));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeacher", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTeacher
		{
			get
			{
				return this._IdTeacher;
			}
			set
			{
				if ((this._IdTeacher != value))
				{
					this.OnIdTeacherChanging(value);
					this.SendPropertyChanging();
					this._IdTeacher = value;
					this.SendPropertyChanged("IdTeacher");
					this.OnIdTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(500)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarChar(500)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="NVarChar(MAX)")]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_History", Storage="_Histories", ThisKey="IdTeacher", OtherKey="IdTeacher")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Profile", Storage="_Profiles", ThisKey="IdTeacher", OtherKey="IdTeacher")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Qualification", Storage="_Qualifications", ThisKey="IdTeacher", OtherKey="IdTeacher")]
		public EntitySet<Qualification> Qualifications
		{
			get
			{
				return this._Qualifications;
			}
			set
			{
				this._Qualifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Review", Storage="_Reviews", ThisKey="IdTeacher", OtherKey="IdTeacher")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Qualifications(Qualification entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Qualifications(Qualification entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCourse;
		
		private System.Nullable<int> _IdGrade;
		
		private System.Nullable<int> _IdSubject;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Profile> _Profiles;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCourseChanging(int value);
    partial void OnIdCourseChanged();
    partial void OnIdGradeChanging(System.Nullable<int> value);
    partial void OnIdGradeChanged();
    partial void OnIdSubjectChanging(System.Nullable<int> value);
    partial void OnIdSubjectChanged();
    #endregion
		
		public Course()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			this._Grade = default(EntityRef<Grade>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCourse", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCourse
		{
			get
			{
				return this._IdCourse;
			}
			set
			{
				if ((this._IdCourse != value))
				{
					this.OnIdCourseChanging(value);
					this.SendPropertyChanging();
					this._IdCourse = value;
					this.SendPropertyChanged("IdCourse");
					this.OnIdCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGrade", DbType="Int")]
		public System.Nullable<int> IdGrade
		{
			get
			{
				return this._IdGrade;
			}
			set
			{
				if ((this._IdGrade != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdGradeChanging(value);
					this.SendPropertyChanging();
					this._IdGrade = value;
					this.SendPropertyChanged("IdGrade");
					this.OnIdGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSubject", DbType="Int")]
		public System.Nullable<int> IdSubject
		{
			get
			{
				return this._IdSubject;
			}
			set
			{
				if ((this._IdSubject != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSubjectChanging(value);
					this.SendPropertyChanging();
					this._IdSubject = value;
					this.SendPropertyChanged("IdSubject");
					this.OnIdSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_History", Storage="_Histories", ThisKey="IdCourse", OtherKey="IdCourse")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Profile", Storage="_Profiles", ThisKey="IdCourse", OtherKey="IdCourse")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Course", Storage="_Grade", ThisKey="IdGrade", OtherKey="IdGrade", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._IdGrade = value.IdGrade;
					}
					else
					{
						this._IdGrade = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Course", Storage="_Subject", ThisKey="IdSubject", OtherKey="IdSubject", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._IdSubject = value.IdSubject;
					}
					else
					{
						this._IdSubject = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
}
#pragma warning restore 1591
